# [target.riscv64gc-unknown-linux-gnu]
# image = "ghcr.io/cross-rs/riscv64gc-unknown-linux-gnu:main"
# pre-build = ["dpkg --add-architecture riscv64 && apt-get update && apt-get install --assume-yes gfortran"]

# command = "cross"
# args = ["+nightly", "-Ztarget-applies-to-host", "-Zhost-config", "build", "--release", "--package", "mems", "--target", "x86_64-unknown-linux-musl", "${VERBOSE}"]

[target.x86_64-unknown-linux-gnu]
image = "ghcr.io/cross-rs/x86_64-unknown-linux-gnu:main"
pre-build = ["sed -i 's@//.*archive.ubuntu.com@//mirrors.ustc.edu.cn@g' /etc/apt/sources.list && apt-get update && apt-get install --assume-yes python3 gcc-10 g++-10 libssl-dev golang-1.21 libmysqlclient-dev && ln -sf /usr/lib/go-1.21/bin/go /usr/bin/go && mkdir -p /.cache && chmod 777 /.cache && mkdir -p /go && chmod 777 /go"]
# pre-build = ["sed -i 's@//.*archive.ubuntu.com@//mirrors.ustc.edu.cn@g' /etc/apt/sources.list && apt-get update && apt-get install --assume-yes gcc-10 g++-10 libssl-dev golang-1.21 libmysqlclient-dev && ln -sf /usr/lib/go-1.21/bin/go /usr/bin/go && mkdir -p /.cache && chmod 777 /.cache && mkdir -p /go && chmod 777 /go && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 100 && update-alternatives --install /usr/bin/cc cc /usr/bin/gcc 30 && update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++ 30"]
# dockerfile = "build-tools/docker/Dockerfile.ubuntu18"

[target.x86_64-unknown-linux-musl]
# image = "rust:alpine"
# pre-build = ["rustup default nightly && rustup component add rustfmt && apk add --no-cache -U musl-dev openssl-dev openssl-libs-static g++ clang-dev llvm-dev"]
pre-build = ["sed -i 's@//.*archive.ubuntu.com@//mirrors.ustc.edu.cn@g' /etc/apt/sources.list && apt-get update && apt-get install --assume-yes python3"] # for nio-opcua
image = "ghcr.io/cross-rs/x86_64-unknown-linux-musl"

[target.x86_64-unknown-linux-musl.env]
passthrough = [
    "MKLROOT",
    "CBC_DOWNLOAD_DIR",
    "IPOPT_DOWNLOAD_DIR",
]
volumes = [
    "MKLROOT",
    "CBC_DOWNLOAD_DIR",
    "IPOPT_DOWNLOAD_DIR",
]

[target.x86_64-unknown-linux-gnu.env]
passthrough = [
    "MKLROOT",
    "CBC_DOWNLOAD_DIR",
    "IPOPT_DOWNLOAD_DIR",
    "GOPROXY=https://goproxy.cn,direct"
]
volumes = [
    "MKLROOT",
    "CBC_DOWNLOAD_DIR",
    "IPOPT_DOWNLOAD_DIR",
]


[target.armv7-unknown-linux-musleabihf]
image = "ghcr.io/dirreke/armv7-x86_64-unknown-linux-musleabihf"
pre-build = ["sed -i 's@//.*archive.ubuntu.com@//mirrors.ustc.edu.cn@g' /etc/apt/sources.list && apt-get update && apt-get install --assume-yes python3"] # for nio-opcua

[target.armv7-unknown-linux-musleabihf.env]
passthrough = [
    "DYNAMIC_ARCH=1",
    "CBC_DOWNLOAD_DIR",
    "IPOPT_DOWNLOAD_DIR",
]
volumes = [
    "CBC_DOWNLOAD_DIR",
    "IPOPT_DOWNLOAD_DIR",
]

[target.armv7-unknown-linux-gnueabihf]
pre-build = ["sed -i 's@//.*archive.ubuntu.com@//mirrors.ustc.edu.cn@g' /etc/apt/sources.list&& cat /etc/resolv.conf && apt-get update && apt-get install --assume-yes --no-install-recommends libclang-5.0-dev clang-5.0 libssl-dev gfortran-arm-linux-gnueabihf python3"]

[target.armv7-unknown-linux-gnueabihf.env]
passthrough = [
    "DYNAMIC_ARCH=1",
    "CBC_DOWNLOAD_DIR",
    "IPOPT_DOWNLOAD_DIR",
]
volumes = [
    "CBC_DOWNLOAD_DIR",
    "IPOPT_DOWNLOAD_DIR",
]

[target.aarch64-unknown-linux-musl]
image = "ghcr.io/dirreke/aarch64-x86_64-unknown-linux-musl"
pre-build = ["sed -i 's@//.*archive.ubuntu.com@//mirrors.ustc.edu.cn@g' /etc/apt/sources.list && apt-get update && apt-get install --assume-yes python3"] # for nio-opcua

[target.aarch64-unknown-linux-musl.env]
passthrough = [
    "DYNAMIC_ARCH=1",
    "CBC_DOWNLOAD_DIR",
    "IPOPT_DOWNLOAD_DIR",
]

volumes = [
    "CBC_DOWNLOAD_DIR",
    "IPOPT_DOWNLOAD_DIR",
]

[target.csky-unknown-linux-gnuabiv2hf]
image = "rust-csky"
dockerfile = "build-tools/docker/Dockerfile.csky"
build-std = true

[target.csky-unknown-linux-gnuabiv2hf.env]
passthrough = [
    "DYNAMIC_ARCH=1",
    "OPENBLAS_TARGET=CK860FV",
]

[target.x86_64-pc-windows-gnu]
pre-build = ["apt-get update && apt-get install --assume-yes --no-install-recommends libclang-3.9-dev clang-3.9"]

[target.x86_64-pc-windows-gnu.env]
passthrough = [
    "CFLAGS_x86_64_pc_windows_gnu",
    "CPPFLAGS_x86_64_pc_windows_gnu",
    "CXX_x86_64_pc_windows_gnu",
]
